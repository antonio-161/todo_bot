import logging
import sys
from datetime import datetime

from aiogram import Router, F
from aiogram.types import CallbackQuery

from database import db
from keyboards.inline import (
    get_confirmation_keyboard,
    get_task_detail_keyboard,
    get_tasks_list_keyboard
)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data.startswith("edit_task:"))
async def edit_task_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await callback.answer()

    task_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        task = await db.get_task_by_id(task_id, user_id)
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if task['status']:
            await callback.answer(
                "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É",
                show_alert=True
            )
            return
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        task_text = task['task_text']
        if len(task_text) > 100:
            task_text = task_text[:97] + "..."
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_text = "üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>"
        edit_text += f"\n\n<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:</b>\n<i>{task_text}</i>"
        edit_text += "\n\n<i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:</i>"
        await callback.message.edit_text(
            edit_text,
            parse_mode="HTML",
            reply_markup=get_task_detail_keyboard(task_id, edit=True)
        )
    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        logger.error(f"Error editing task {task_id} for user {user_id}: {e}")


@router.callback_query(F.data.startswith("update_task:"))
async def update_task_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()

    task_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    new_task_text = callback.message.text.split("\n\n", 1)[-1].strip()

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = await db.update_task(task_id, user_id, new_task_text)
        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if success:
            await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", show_alert=True)
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞,
            # —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback.message.edit_reply_markup()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
            task = await db.get_task_by_id(task_id, user_id)
            if task:
                created_date = task['created_at'].strftime("%d.%m.%Y –≤ %H:%M")
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
                updated_text = f"""
                                üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏</b>
                                <b>–¢–µ–∫—Å—Ç:</b>
                                <i>{task['task_text']}</i>
                                <b>–°—Ç–∞—Ç—É—Å:</b> ‚è≥ –ê–∫—Ç–∏–≤–Ω–∞
                                <b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_date}
                                """
                await callback.message.edit_text(
                    updated_text,
                    parse_mode="HTML",
                    reply_markup=get_task_detail_keyboard(task_id, True)
                )
        else:
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É", show_alert=True
            )
    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        logger.error(f"Error updating task {task_id} for user {user_id}: {e}")


@router.callback_query(F.data.startswith("complete_task:"))
async def complete_task_callback(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    await callback.answer()

    task_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    try:
        # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        success = await db.complete_task(task_id, user_id)
        # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if success:
            await callback.answer(
                "‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!",
                show_alert=True
            )
            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback.message.edit_reply_markup()
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            completed_at = datetime.now()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.update_task_status(task_id, user_id, completed_at)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
            task = await db.get_task_by_id(task_id, user_id)
            if task:
                completed_at = task['completed_at']
                completed_date = completed_at.strftime("%d.%m.%Y –≤ %H:%M")
                created_date = task['created_at'].strftime("%d.%m.%Y –≤ %H:%M")
                updated_text = f"""
üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏</b>
<b>–¢–µ–∫—Å—Ç:</b>
<i>{task['task_text']}</i>
<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞
<b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_date}
<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∞:</b> {completed_date}
"""
                await callback.message.edit_text(
                    updated_text,
                    parse_mode="HTML",
                    reply_markup=get_task_detail_keyboard(task_id, True)
                )
        else:
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é", show_alert=True
            )

    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        logger.error(
            f"Error completing task {task_id} for user {user_id}: {e}"
        )


@router.callback_query(F.data.startswith("delete_task:"))
async def delete_task_callback(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await callback.answer()

    task_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        task = await db.get_task_by_id(task_id, user_id)
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if task['status']:
            await callback.answer(
                "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É",
                show_alert=True
            )
            return
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        task_text = task['task_text']
        if len(task_text) > 100:
            task_text = task_text[:97] + "..."
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        confirmation_text = f"""
üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>

<b>–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?</b>

<i>{task_text}</i>

‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>
"""

        await callback.message.edit_text(
            confirmation_text,
            parse_mode="HTML",
            reply_markup=get_confirmation_keyboard(task_id, "delete")
        )

    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        logger.error(
            f"Error preparing delete confirmation for task {task_id}: {e}"
        )


@router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete_task(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await callback.answer()

    task_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    try:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
        success = await db.delete_task(task_id, user_id)
        # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if success:
            await callback.answer("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback.message.edit_reply_markup()
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
            await callback.message.delete()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            tasks = await db.get_user_tasks(user_id, include_completed=False)
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á
            if not tasks:
                no_tasks_text = """
üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</b>

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!

–°–æ–∑–¥–∞–π —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /new_task
"""
                await callback.message.edit_text(
                    no_tasks_text,
                    parse_mode="HTML",
                    reply_markup=get_tasks_list_keyboard([])
                )
            else:
                tasks_text = f"üìã <b>–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ ({len(tasks)})</b>\n\n"

                for i, task in enumerate(tasks, 1):
                    created_date = task['created_at'].strftime("%d.%m.%Y")
                    status_emoji = "‚úÖ" if task['status'] else "‚è≥"

                    task_text = task['task_text']
                    if len(task_text) > 60:
                        task_text = task_text[:57] + "..."
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
                    tasks_text += f"{i}. {status_emoji} <i>{task_text}</i>\n"
                    tasks_text += f"   üìÖ {created_date}\n\n"
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                tasks_text += """
                            üëÜ <i>–ù–∞–∂–º–∏ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</i>
                            """
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
                await callback.message.edit_text(
                    tasks_text,
                    parse_mode="HTML",
                    reply_markup=get_tasks_list_keyboard(tasks)
                )
        else:
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", show_alert=True
            )

    except Exception as e:
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True
        )
        logger.error(f"Error deleting task {task_id} for user {user_id}: {e}")
