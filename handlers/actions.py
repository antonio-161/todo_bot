from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from database import db
from keyboards.inline import (
    get_confirmation_keyboard,
    get_task_detail_keyboard,
    get_tasks_list_keyboard
)
from states import TaskStates
from utils.logging_config import get_logger

logger = get_logger(__name__)

router = Router()


async def format_task_detail_text(task: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏"""
    created_date = task['created_at'].strftime("%d.%m.%Y –≤ %H:%M")
    status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task['status'] else "‚è≥ –ê–∫—Ç–∏–≤–Ω–∞"

    text = f"""üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏</b>

<b>–¢–µ–∫—Å—Ç:</b>
<i>{task['task_text']}</i>

<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
<b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_date}"""

    if task['status'] and task['completed_at']:
        completed_date = task['completed_at'].strftime("%d.%m.%Y –≤ %H:%M")
        text += f"\n<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∞:</b> {completed_date}"

    return text


async def update_tasks_list_message(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á"""
    user_id = callback.from_user.id
    tasks = await db.get_user_tasks(user_id, include_completed=False)

    if not tasks:
        no_tasks_text = """üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</b>

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!

–°–æ–∑–¥–∞–π —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /new_task"""

        await callback.message.edit_text(
            no_tasks_text,
            parse_mode="HTML",
            reply_markup=get_tasks_list_keyboard([])
        )
        return

    tasks_text = f"üìã <b>–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ ({len(tasks)})</b>\n\n"

    for i, task in enumerate(tasks, 1):
        created_date = task['created_at'].strftime("%d.%m.%Y")
        status_emoji = "‚úÖ" if task['status'] else "‚è≥"

        task_text = task['task_text']
        if len(task_text) > 60:
            task_text = task_text[:57] + "..."

        tasks_text += f"{i}. {status_emoji} <i>{task_text}</i>\n"
        tasks_text += f"   üìÖ {created_date}\n\n"

    tasks_text += "üëÜ <i>–ù–∞–∂–º–∏ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</i>"

    await callback.message.edit_text(
        tasks_text,
        parse_mode="HTML",
        reply_markup=get_tasks_list_keyboard(tasks)
    )


@router.callback_query(F.data.startswith("edit_task:"))
async def edit_task_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await callback.answer()

    try:
        task_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    user_id = callback.from_user.id

    try:
        task = await db.get_task_by_id(task_id, user_id)

        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        if task['status']:
            await callback.answer(
                "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É",
                show_alert=True
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(editing_task_id=task_id)
        await state.set_state(TaskStates.waiting_for_task_edit)

        task_text = task['task_text']
        if len(task_text) > 100:
            task_text = task_text[:97] + "..."

        edit_text = f"""üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>

<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:</b>
<i>{task_text}</i>

<i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:</i>"""

        await callback.message.edit_text(
            edit_text,
            parse_mode="HTML",
            reply_markup=get_task_detail_keyboard(task_id, edit=True)
        )

    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        logger.error(
            f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id} "
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )


@router.callback_query(F.data.startswith("complete_task:"))
async def complete_task_callback(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    await callback.answer()

    try:
        task_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    user_id = callback.from_user.id

    try:
        success = await db.complete_task(task_id, user_id)

        if success:
            await callback.answer(
                "‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", show_alert=True
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
            task = await db.get_task_by_id(task_id, user_id)
            if task:
                updated_text = await format_task_detail_text(task)
                await callback.message.edit_text(
                    updated_text,
                    parse_mode="HTML",
                    reply_markup=get_task_detail_keyboard(
                        task_id, task['status']
                    )
                )
        else:
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é",
                show_alert=True
            )

    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        logger.error(
            f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ {task_id} "
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


@router.callback_query(F.data.startswith("delete_task:"))
async def delete_task_callback(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await callback.answer()

    try:
        task_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    user_id = callback.from_user.id

    try:
        task = await db.get_task_by_id(task_id, user_id)

        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        task_text = task['task_text']
        if len(task_text) > 100:
            task_text = task_text[:97] + "..."

        confirmation_text = f"""üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>

<b>–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?</b>

<i>{task_text}</i>

‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>"""

        await callback.message.edit_text(
            confirmation_text,
            parse_mode="HTML",
            reply_markup=get_confirmation_keyboard(task_id, "delete")
        )

    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        logger.error(
            (
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ "
                f"{task_id}: {e}"
            )
        )


@router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete_task(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await callback.answer()

    try:
        task_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    user_id = callback.from_user.id

    try:
        success = await db.delete_task(task_id, user_id)

        if success:
            await callback.answer("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
            await update_tasks_list_message(callback)
        else:
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", show_alert=True
            )

    except Exception as e:
        await callback.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True
        )
        logger.error(f"Error deleting task {task_id} for user {user_id}: {e}")


@router.callback_query(F.data.startswith("cancel_edit:"))
async def cancel_edit_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await callback.answer()
    await state.clear()

    try:
        task_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    user_id = callback.from_user.id

    try:
        task = await db.get_task_by_id(task_id, user_id)
        if task:
            task_detail_text = await format_task_detail_text(task)
            await callback.message.edit_text(
                task_detail_text,
                parse_mode="HTML",
                reply_markup=get_task_detail_keyboard(task_id, task['status'])
            )
    except Exception as e:
        logger.error(f"Error canceling edit for task {task_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
