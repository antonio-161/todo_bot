from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database import db
from keyboards.inline import get_timezone_keyboard
from keyboards.reply import get_main_keyboard
from states import TimezoneStates
from utils.timezone_utils import (
    validate_timezone,
    get_timezone_info,
    get_user_current_time
)
from utils.logging_config import get_logger

logger = get_logger(__name__)
router = Router()


@router.message(Command("set_timezone"))
@router.message(F.text == "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
async def set_timezone_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_timezone = await db.get_user_timezone(message.from_user.id)
    current_time = get_user_current_time(current_timezone)
    timezone_name = get_timezone_info(current_timezone)

    text = f"""üåç <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞</b>

<b>–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {timezone_name}
<b>–í—Ä–µ–º—è —Å–µ–π—á–∞—Å:</b> {current_time}

–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"""

    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=get_timezone_keyboard()
    )


@router.callback_query(F.data.startswith("set_tz:"))
async def set_timezone_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    await callback.answer()

    try:
        timezone = callback.data.split(":", 1)[1]
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    user_id = callback.from_user.id

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    if not validate_timezone(timezone):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", show_alert=True)
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –ë–î
        success = await db.set_user_timezone(user_id, timezone)

        if success:
            timezone_name = get_timezone_info(timezone)
            current_time = get_user_current_time(timezone)

            success_text = f"""‚úÖ <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>

<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {timezone_name}
<b>–í—Ä–µ–º—è —Å–µ–π—á–∞—Å:</b> {current_time}

–¢–µ–ø–µ—Ä—å –≤—Å–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ."""

            await callback.message.edit_text(
                success_text,
                parse_mode="HTML"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.answer(
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –∑–∞–¥–∞—á–∞–º–∏:",
                reply_markup=get_main_keyboard()
            )

        else:
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞",
                show_alert=True
            )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "timezone_manual")
async def manual_timezone_input(callback: CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    await callback.answer()
    await state.set_state(TimezoneStates.waiting_for_manual_timezone)

    manual_text = """‚úèÔ∏è <b>–†—É—á–Ω–æ–π –≤–≤–æ–¥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ <code>Europe/Moscow</code>
‚Ä¢ <code>Asia/Tokyo</code>
‚Ä¢ <code>America/New_York</code>

–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É."""

    await callback.message.edit_text(
        manual_text,
        parse_mode="HTML"
    )


@router.message(TimezoneStates.waiting_for_manual_timezone)
async def save_manual_timezone(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä—É—á–Ω—É—é"""
    timezone_input = message.text.strip()

    if timezone_input.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel']:
        await state.clear()
        await set_timezone_command(message, state)
        return

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    if not validate_timezone(timezone_input):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'."
        )
        return

    try:
        user_id = message.from_user.id
        success = await db.set_user_timezone(user_id, timezone_input)

        if success:
            await state.clear()
            current_time = get_user_current_time(timezone_input)

            success_text = f"""‚úÖ <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>

<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {timezone_input}
<b>–í—Ä–µ–º—è —Å–µ–π—á–∞—Å:</b> {current_time}

–¢–µ–ø–µ—Ä—å –≤—Å–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ."""

            await message.answer(
                success_text,
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    except Exception as e:
        logger.error(
            "–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ "
            f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}"
        )
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
