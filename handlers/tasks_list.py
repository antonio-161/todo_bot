import logging
import sys

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery

from database import db
from keyboards.inline import get_tasks_list_keyboard, get_task_detail_keyboard

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


@router.message(Command("my_tasks"))
@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
@router.callback_query(F.data == "my_tasks")
@router.callback_query(F.data == "refresh_tasks")
async def show_tasks_list(update):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if isinstance(update, CallbackQuery):
        message = update.message
        user_id = update.from_user.id
        await update.answer()
        edit_message = True
    else:
        message = update
        user_id = update.from_user.id
        edit_message = False

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks = await db.get_user_tasks(user_id, include_completed=False)
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á
        if not tasks:
            no_tasks_text = """
üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</b>

–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!

–°–æ–∑–¥–∞–π —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /new_task
"""
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if edit_message:
                await message.edit_text(
                    no_tasks_text,
                    parse_mode="HTML",
                    reply_markup=get_tasks_list_keyboard([])
                )
            else:
                await message.answer(
                    no_tasks_text,
                    parse_mode="HTML",
                    reply_markup=get_tasks_list_keyboard([])
                )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
        tasks_text = f"üìã <b>–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ ({len(tasks)})</b>\n\n"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—Å—Ç
        for i, task in enumerate(tasks, 1):
            created_date = task['created_at'].strftime("%d.%m.%Y")
            status_emoji = "‚úÖ" if task['status'] else "‚è≥"

            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ
            task_text = task['task_text']
            if len(task_text) > 60:
                task_text = task_text[:57] + "..."
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—Å—Ç
            tasks_text += f"{i}. {status_emoji} <i>{task_text}</i>\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            tasks_text += f"   üìÖ {created_date}\n\n"

        tasks_text += "üëÜ <i>–ù–∞–∂–º–∏ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</i>"
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if edit_message:
            await message.edit_text(
                tasks_text,
                parse_mode="HTML",
                reply_markup=get_tasks_list_keyboard(tasks)
            )
        else:
            await message.answer(
                tasks_text,
                parse_mode="HTML",
                reply_markup=get_tasks_list_keyboard(tasks)
            )

    except Exception as e:
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."

        if edit_message:
            await message.edit_text(error_text)
        else:
            await message.answer(error_text)

        logger.error(f"Error loading tasks for user {user_id}: {e}")


@router.callback_query(F.data.startswith("show_task:"))
async def show_task_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    await callback.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ë–î
        task = await db.get_task_by_id(task_id, user_id)

        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º
        if not task:
            await callback.message.edit_text(
                "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=get_tasks_list_keyboard([])
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        created_date = task['created_at'].strftime("%d.%m.%Y –≤ %H:%M")
        status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task['status'] else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"

        task_detail_text = f"""
üìù <b>–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏</b>

<b>–¢–µ–∫—Å—Ç:</b>
<i>{task['task_text']}</i>

<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
<b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_date}
"""

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        if task['status'] and task['completed_at']:
            completed_date = task['completed_at'].strftime("%d.%m.%Y –≤ %H:%M")
            task_detail_text += f"<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∞:</b> {completed_date}"
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            task_detail_text,
            parse_mode="HTML",
            reply_markup=get_task_detail_keyboard(task_id, task['status'])
        )

    except Exception as e:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏."
        )

        logger.error(f"Error loading task {task_id} for user {user_id}: {e}")
