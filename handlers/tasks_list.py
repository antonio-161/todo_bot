from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery

from database import db
from keyboards.inline import get_tasks_list_keyboard, get_task_detail_keyboard
from utils.logging_config import get_logger
from utils.task_formatting import (
    format_tasks_list_text,
    format_task_detail_text
)

logger = get_logger(__name__)
router = Router()


@router.message(Command("my_tasks"))
@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
@router.callback_query(F.data == "my_tasks")
@router.callback_query(F.data == "refresh_tasks")
@router.callback_query(F.data == "hide_completed")
async def show_tasks_list(update, show_completed: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if isinstance(update, CallbackQuery):
        message = update.message
        user_id = update.from_user.id
        await update.answer()
        edit_message = True
    else:
        message = update
        user_id = update.from_user.id
        edit_message = False

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        tasks = await db.get_user_tasks(
            user_id,
            include_completed=show_completed
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∫–Ω–æ–ø–∫–∏
        completed_count = await db.get_completed_tasks_count(user_id)

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_timezone = await db.get_user_timezone(user_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        tasks_text = format_tasks_list_text(
            tasks, user_timezone, show_completed
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        keyboard = get_tasks_list_keyboard(
            tasks, show_completed, completed_count
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if edit_message:
            await message.edit_text(
                tasks_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                tasks_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )

    except Exception as e:
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        logger.error(f"Error loading tasks for user {user_id}: {e}")

        if edit_message:
            await message.edit_text(error_text)
        else:
            await message.answer(error_text)


@router.callback_query(F.data == "show_completed")
async def show_completed_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏"""
    await show_tasks_list(callback, show_completed=True)


@router.callback_query(F.data.startswith("show_task:"))
async def show_task_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    await callback.answer()

    try:
        task_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    user_id = callback.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ë–î
        task = await db.get_task_by_id(task_id, user_id)

        if not task:
            await callback.message.edit_text(
                "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=get_tasks_list_keyboard([])
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_timezone = await db.get_user_timezone(user_id)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
        task_detail_text = await format_task_detail_text(task, user_timezone)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            task_detail_text,
            parse_mode="HTML",
            reply_markup=get_task_detail_keyboard(task_id, task['status'])
        )

    except Exception as e:
        logger.error(f"Error loading task {task_id} for user {user_id}: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏."
        )
