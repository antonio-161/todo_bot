from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from states import TaskStates
from database import db
from keyboards.reply import get_cancel_keyboard, get_main_keyboard
from keyboards.inline import get_task_detail_keyboard
from utils.logging_config import get_logger

logger = get_logger(__name__)

router = Router()


@router.message(Command("new_task"))
@router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
@router.callback_query(F.data == "new_task")
async def new_task_command(update, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""

    if isinstance(update, CallbackQuery):
        message = update.message
        await update.answer()
    else:
        message = update

    await state.set_state(TaskStates.waiting_for_new_task)

    prompt_text = """üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>

–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∑–∞–º–µ—Ç–∫–∏.

<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i>
‚Ä¢ –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ
‚Ä¢ –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –ø—è—Ç–Ω–∏—Ü–µ
‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É

–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∞" """

    if isinstance(update, CallbackQuery):
        await message.edit_text(
            prompt_text,
            parse_mode="HTML",
            reply_markup=None
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–º–µ–Ω—ã
        await message.answer(
            "–ñ–¥—É —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏...",
            reply_markup=get_cancel_keyboard()
        )
    else:
        await message.answer(
            prompt_text,
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )


@router.message(TaskStates.waiting_for_new_task, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_new_task(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )


@router.message(TaskStates.waiting_for_new_task)
async def save_new_task(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    task_text = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if not task_text:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return

    if len(task_text) > 1000:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤). "
            "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:",
            reply_markup=get_cancel_keyboard()
        )
        return

    try:
        task_id = await db.add_task(message.from_user.id, task_text)
        await state.clear()

        success_text = f"""‚úÖ <b>–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>

üìù <i>{task_text}</i>

ID –∑–∞–¥–∞—á–∏: {task_id}"""

        await message.answer(
            success_text,
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )

    except ValueError as e:
        await message.answer(
            f"‚ùå {str(e)}",
            reply_markup=get_cancel_keyboard()
        )
    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        logger.error(f"Error saving task for user {message.from_user.id}: {e}")


@router.message(TaskStates.waiting_for_task_edit)
async def save_edited_task(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    new_text = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not new_text:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
        )
        return

    if len(new_text) > 1000:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤). "
            "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:"
        )
        return

    try:
        data = await state.get_data()
        task_id = data.get('editing_task_id')

        if not task_id:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–¥–∞—á–∏.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return

        success = await db.update_task(task_id, message.from_user.id, new_text)

        if success:
            await state.clear()

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            task = await db.get_task_by_id(task_id, message.from_user.id)
            if task:
                from handlers.actions import format_task_detail_text
                task_detail_text = await format_task_detail_text(task)

                await message.answer(
                    "‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                    reply_markup=get_main_keyboard()
                )

                await message.answer(
                    task_detail_text,
                    parse_mode="HTML",
                    reply_markup=get_task_detail_keyboard(
                        task_id, task['status']
                    )
                )
            else:
                await message.answer(
                    "‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                    reply_markup=get_main_keyboard()
                )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            )

    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}")
    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        logger.error(
            "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ "
            f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}"
        )


@router.message(TaskStates.waiting_for_new_task, ~F.text)
@router.message(TaskStates.waiting_for_task_edit, ~F.text)
async def invalid_task_input(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–¥–∞—á–∞–º–∏"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ '‚ùå –û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.",
        reply_markup=get_cancel_keyboard()
    )
