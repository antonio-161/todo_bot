from typing import List, Dict

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def get_task_keyboard(
    task_id: int,
    is_completed: bool = False
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    buttons = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
    if not is_completed:
        buttons.append([
            InlineKeyboardButton(
                text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                callback_data=f"complete_task:{task_id}"
            )
        ])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
    buttons.append([
        InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_task:{task_id}"
        )
    ])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="my_tasks"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_tasks_list_keyboard(tasks: List[Dict]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
    for task in tasks:
        task_id = task['id']
        status_emoji = "‚úÖ" if task['status'] else "‚è≥"

        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        task_text = task['task_text']
        if len(task_text) > 30:
            task_text = task_text[:27] + "..."

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = f"{status_emoji} {task_text}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"show_task:{task_id}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = [
        InlineKeyboardButton(text="üìù –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task"),
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tasks")
    ]
    buttons.append(control_buttons)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_task_detail_keyboard(
    task_id: int,
    is_completed: bool = False
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏"""
    buttons = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
    if not is_completed:
        buttons.append([
            InlineKeyboardButton(
                text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π",
                callback_data=f"complete_task:{task_id}"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É" –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
    buttons.extend([
        [
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É",
                callback_data=f"delete_task:{task_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                callback_data="my_tasks"
            )
        ]
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_confirmation_keyboard(
        task_id: int,
        action: str
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úÖ –î–∞",
                callback_data=f"confirm_{action}:{task_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç",
                callback_data=f"show_task:{task_id}"
            )
        ]
    ]

    return InlineKeyboardMarkup(inline_keyboard=buttons)
