# Dockerfile.dev

# Используем легковесный образ Python
FROM python:3.12-slim

# Устанавливаем рабочую директорию внутри контейнера.
# Важно: это та директория, куда будет монтироваться ваш локальный код.
WORKDIR /app

# Установка системных зависимостей, необходимых для компиляции некоторых Python-пакетов
# и очистка кэша apt-get для уменьшения размера слоя.
# libpq-dev нужен для работы с PostgreSQL через asyncpg.
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Копируем только requirements.txt и устанавливаем Python-зависимости.
# Этот слой будет кэшироваться, и пересборка не произойдет, если requirements.txt не изменился.
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Мы НЕ КОПИРУЕМ СЮДА ВЕСЬ ПРОЕКТ (НЕ ИСПОЛЬЗУЕМ COPY . .)
# Код проекта будет монтироваться с хост-машины через volumes в docker-compose.dev.yml.
# Это позволяет реализовать "hot-reloading" (изменения на хосте сразу видны в контейнере)
# без необходимости пересобирать Docker-образ при каждом изменении кода.

# CMD здесь не указывается, так как он будет переопределен в docker-compose.dev.yml.
# Это дает гибкость в разработке, позволяя запускать разные команды
# (например, тесты, линтеры или основной бот) без изменения Dockerfile.